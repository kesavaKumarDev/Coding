class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        TreeNode curr=root,temp=null;
        Stack<TreeNode> st=new Stack<>();
        List<Integer> l=new ArrayList<>();

        if(root==null){
            return l;
        }

        while(curr!=null || !st.isEmpty()){  // condition to be check
            if(curr!=null){   // curr is not null then add to the stack and call the left 
                st.push(curr);
                curr=curr.left;
            }
            else{    // if the curr is null but stack is not empty 
                temp=st.peek().right;  // go the st.peek() ritgh node to traverse
                if(temp==null){  // the temp is null then pop the node from stack 
                    temp=st.pop();
                    l.add(temp.val); // add to the list
                    while(!st.isEmpty() && temp==st.peek().right){   // see there were any root of it
                        temp=st.pop();
                        l.add(temp.val);  // add to the list
                    }
                }
                else{
                    curr=temp;  // assign temp to the curr for further traversing
                }
            }

        }
        return l; // return the list 
    }  
}
