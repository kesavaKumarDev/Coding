import java.util.Stack;

class Solution {
    // Function to get the precedence of operators
    public static int pre(char c) {
        if (c == '+' || c == '-') {
            return 1;
        } else if (c == '*' || c == '/') {
            return 2;
        } else if (c == '^') {
            return 3;
        } else {
            return -1;
        }
    }

    // Function to convert infix expression to postfix expression
    public static String infixToPostfix(String exp) {
        int n = exp.length();
        StringBuilder s = new StringBuilder();
        Stack<Character> s1 = new Stack<>();

        for (int i = 0; i < n; i++) {
            char c = exp.charAt(i);

            if (Character.isLetterOrDigit(c)) {
                s.append(c);
            } else if (c == '(') {
                s1.push(c);
            } else if (c == ')') {
                while (!s1.isEmpty() && s1.peek() != '(') {
                    s.append(s1.pop());
                }
                s1.pop();
            } else {
                while (!s1.isEmpty() && pre(s1.peek()) >= pre(c)) {
                    s.append(s1.pop());
                }
                s1.push(c);
            }
        }

        while (!s1.isEmpty()) {
            s.append(s1.pop());
        }

        return s.toString();
    }

    // Function to reverse a character array
    public static void rev(char[] arr, int l, int r) {
        while (l < r) {
            char temp = arr[l];
            arr[l] = arr[r];
            arr[r] = temp;
            l++;
            r--;
        }
    }

    // Function to convert infix expression to prefix expression
    public static String infixToPrefix(String exp) {
        int n = exp.length();

        // Reverse the infix expression
        char[] arr = exp.toCharArray();
        rev(arr, 0, n - 1);

        // Replace '(' with ')' and vice versa
        for (int i = 0; i < n; i++) {
            if (arr[i] == '(') {
                arr[i] = ')';
            } else if (arr[i] == ')') {
                arr[i] = '(';
            }
        }

        // Convert the modified infix expression to postfix
        exp = new String(arr);
        exp = infixToPostfix(exp);

        // Reverse the postfix expression to get the prefix expression
        arr = exp.toCharArray();
        rev(arr, 0, exp.length() - 1);

        return new String(arr);
    }

    public static void main(String[] args) {
        String infix = "(a-b/c)*(a/k-l)";
        System.out.println("Infix: " + infix);
        String prefix = infixToPrefix(infix);
        System.out.println("Prefix: " + prefix);
    }
}
