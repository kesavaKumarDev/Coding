class Node{
    int val;
    Node left,right;
    Node(int val){
        this.val=val;
        this.left=null;
        this.right=null;
    }
}

public class Main{
    static Node first,middle,last,prev;
    
    public static Node insert(Node root,int val){
        
        if(root==null){
            return new Node(val);
        }
        
        if(val<root.val){
            root.left=insert(root.left,val);
        }
        else{
            root.right=insert(root.right,val);
        }
        
        return root;
    }
    
    public static void binaryrec(Node root){
        
        if(root==null){
            return;
        }
        
        binaryrec(root.left);
        
        if(prev!=null && root.val<prev.val){
            if(first==null){
                first=prev;
                middle=root;
            }
            else{
                last=root;
            }
        }
        
        prev=root;
        
        binaryrec(root.right);
    }
    
    public static void inorder(Node root){
        if(root==null){
            return;
        }
        
        inorder(root.left);
        System.out.print(root.val+" ");
        inorder(root.right);
    }
   
    public static void swap(Node a,Node b){
        int t=a.val;
        a.val=b.val;
        b.val=t;
        
        //
        Node t1=a.left=
        a.left=b.left;
        b.left=t1;
        
        t1=a.right;
        a.right=b.right;
        b.right=t1;
    }
   
    public static void main(String[] args){
        first=middle=last=null;
        prev =new Node(Integer.MIN_VALUE);
        Node root=null;
        root=insert(root,3);
        insert(root,1);
        insert(root,2);
        insert(root,4);
        
        swap(root.right,root.left.right);
        
        binaryrec(root);
        
        
        
        if(first!=null && last!=null){
            int t=first.val;
            first.val=last.val;
            last.val=t;
        }
        else if(first!=null && middle!=null){
            int t=first.val;
            first.val=middle.val;
            middle.val=t;
        }
        
        inorder(root);
        
        
    }
}


